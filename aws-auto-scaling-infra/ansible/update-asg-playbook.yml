---
- name: Update Auto Scaling Group instances safely
  hosts: all
  become: yes
  serial: 1  # ⭐ Update ONE instance at a time for zero downtime
  max_fail_percentage: 0  # ⭐ Stop if any instance fails

  pre_tasks:
    - name: Get Auto Scaling Group information
      debug:
        msg: |
          Instance: {{ inventory_hostname }}
          ASG: {{ ansible_ec2_asg_name | default('Unknown') }}
          Lifecycle: {{ ansible_ec2_asg_lifecycle_state | default('InService') }}

    - name: Check if instance is in Auto Scaling Group
      fail:
        msg: "Instance {{ inventory_hostname }} is not in service in ASG"
      when: 
        - ansible_ec2_asg_lifecycle_state is defined
        - ansible_ec2_asg_lifecycle_state != "InService"

  tasks:
    - name: Put instance in Standby (optional - for zero downtime)
      community.aws.ec2_asg:
        name: "{{ ansible_ec2_asg_name }}"
        instance_id: "{{ ansible_ec2_instance_id }}"
        state: absent
        wait: yes
      when: ansible_ec2_asg_name is defined
      ignore_errors: yes

    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Upgrade packages (safe - no kernel updates)
      apt:
        upgrade: safe
        autoremove: yes
        autoclean: yes
      when: ansible_os_family == "Debian"
      register: apt_upgrade

    - name: Show upgrade results
      debug:
        msg: "{{ inventory_hostname }} - Changed: {{ apt_upgrade.changed }}, Packages: {{ apt_upgrade.changed | default(0) }}"

    - name: Check if reboot required
      stat:
        path: /var/run/reboot-required
      register: reboot_required

    - name: Reboot if required (with ASG awareness)
      reboot:
        msg: "Rebooting after updates"
        connect_timeout: 15
        reboot_timeout: 300
        pre_reboot_delay: 10
        post_reboot_delay: 30
      when: 
        - reboot_required.stat.exists
        - ansible_ec2_asg_name is not defined  # Only reboot if not in ASG, or handle carefully

    - name: Wait for instance to come back online
      wait_for_connection:
        connect_timeout: 30
        sleep: 10
        delay: 10
        timeout: 600

    - name: Put instance back InService (if it was in Standby)
      community.aws.ec2_asg:
        name: "{{ ansible_ec2_asg_name }}"
        instance_id: "{{ ansible_ec2_instance_id }}"
        state: present
        wait: yes
      when: ansible_ec2_asg_name is defined
      ignore_errors: yes

    - name: Verify nginx is running
      systemd:
        name: nginx
        state: started
        enabled: yes

    - name: Test web server
      uri:
        url: "http://localhost/"
        status_code: 200
        timeout: 10
      register: web_test

    - name: Show final status
      debug:
        msg: |
          ✅ {{ inventory_hostname }} - Update completed successfully!
          Web server: {{ 'OK' if web_test.status == 200 else 'FAILED' }}
          Reboot: {{ 'Yes' if reboot_required.stat.exists else 'No' }}
