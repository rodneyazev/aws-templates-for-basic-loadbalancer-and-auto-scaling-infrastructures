name: Terraform AWS Infrastructure with S3 Backend

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Terraform action'
        required: true
        options:
          - plan
          - apply
          - destroy
        default: 'plan'

env:
  TF_WORKING_DIR: 'aws-infra/aws-basic-infra'
  TF_STATE_BUCKET: 'my-terraform-state'

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Create S3 bucket for Terraform state
      run: |
        # Create unique bucket name with timestamp
        BUCKET_NAME="terraform-state-$(date +%s)-$GITHUB_RUN_ID"
        echo "TF_STATE_BUCKET=$BUCKET_NAME" >> $GITHUB_ENV
        
        # Create S3 bucket for state
        aws s3api create-bucket \
          --bucket $BUCKET_NAME \
          --region ${{ secrets.AWS_REGION }} \
          --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }} || echo "Bucket may already exist"
        
        # Enable versioning for state files
        aws s3api put-bucket-versioning \
          --bucket $BUCKET_NAME \
          --versioning-configuration Status=Enabled
          
        echo "Created S3 bucket: $BUCKET_NAME"
      
    - name: Clone infrastructure templates
      run: |
        rm -rf aws-infra
        git clone https://github.com/rodneyazev/aws-templates-for-basic-loadbalancer-and-auto-scaling-infrastructures.git aws-infra

    - name: Configure S3 backend
      run: |
        cat > backend.tf << EOF
        terraform {
          backend "s3" {
            bucket = "$TF_STATE_BUCKET"
            key    = "terraform.tfstate"
            region = "${{ secrets.AWS_REGION }}"
          }
        }
        EOF
        echo "Configured S3 backend with bucket: $TF_STATE_BUCKET"
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Plan
      if: github.event.inputs.action == 'plan'
      run: terraform plan
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Plan Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform plan -destroy
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: terraform apply -auto-approve
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform destroy -auto-approve
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Show S3 state info
      if: always()
      run: |
        echo "=== S3 State Bucket Contents ==="
        aws s3 ls s3://$TF_STATE_BUCKET/ --recursive || echo "No state files in bucket"
      working-directory: ${{ env.TF_WORKING_DIR }}
