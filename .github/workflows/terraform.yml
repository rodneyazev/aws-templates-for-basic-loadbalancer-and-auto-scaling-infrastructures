name: Terraform AWS Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Terraform action'
        required: true
        options:
          - plan
          - apply
          - destroy
        default: 'plan'

env:
  TF_STATE_BUCKET: 'my-permanent-terraform-state'
  TF_WORKING_DIR: 'aws-basic-infra'  # Correct path from the main branch

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Verify S3 bucket exists
      run: |
        echo "Using permanent S3 bucket: $TF_STATE_BUCKET"
        aws s3api head-bucket --bucket "$TF_STATE_BUCKET" || {
          echo "ERROR: S3 bucket $TF_STATE_BUCKET doesn't exist or is not accessible!"
          exit 1
        }
        echo "✓ S3 bucket verified and accessible"

    - name: Clone infrastructure templates from main branch
      run: |
        rm -rf aws-templates
        git clone --branch main https://github.com/rodneyazev/aws-templates-for-basic-loadbalancer-and-auto-scaling-infrastructures.git aws-templates
        
        echo "=== Checking if $TF_WORKING_DIR exists ==="
        if [ -d "aws-templates/$TF_WORKING_DIR" ]; then
          echo "✓ Directory exists"
          ls -la aws-templates/$TF_WORKING_DIR/
        else
          echo "✗ Directory doesn't exist. Available directories:"
          find aws-templates -type d | head -20
          exit 1
        fi

    - name: Configure S3 backend
      run: |
        cat > backend.tf << EOF
        terraform {
          backend "s3" {
            bucket = "$TF_STATE_BUCKET"
            key    = "terraform.tfstate"
            region = "${{ secrets.AWS_REGION }}"
          }
        }
        EOF
        echo "Configured S3 backend with bucket: $TF_STATE_BUCKET"
        cat backend.tf
      working-directory: aws-templates/${{ env.TF_WORKING_DIR }}

    - name: Terraform Init
      run: terraform init
      working-directory: aws-templates/${{ env.TF_WORKING_DIR }}

    - name: Check current state before operation
      run: |
        echo "=== Current State ==="
        terraform state list 2>/dev/null || echo "No existing state"
        echo "=== S3 State File Info ==="
        aws s3 ls s3://$TF_STATE_BUCKET/terraform.tfstate || echo "No state file in S3"
      working-directory: aws-templates/${{ env.TF_WORKING_DIR }}

    - name: Terraform Plan
      if: github.event.inputs.action == 'plan'
      run: terraform plan
      working-directory: aws-templates/${{ env.TF_WORKING_DIR }}

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: terraform apply -auto-approve
      working-directory: aws-templates/${{ env.TF_WORKING_DIR }}

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform destroy -auto-approve
      working-directory: aws-templates/${{ env.TF_WORKING_DIR }}

    - name: Show state after operation
      if: always()
      run: |
        echo "=== State After Operation ==="
        terraform state list 2>/dev/null || echo "No state remaining"
      working-directory: aws-templates/${{ env.TF_WORKING_DIR }}