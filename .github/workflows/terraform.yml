name: Terraform AWS Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Terraform action'
        required: true
        options:
          - plan
          - apply
          - destroy
        default: 'plan'

env:
  PERSISTENT_STATE_DIR: 'terraform-state-files'
  TF_WORKING_DIR: 'aws-infra/aws-basic-infra'

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Create persistent state directory
      run: mkdir -p ${{ env.PERSISTENT_STATE_DIR }}

    - name: Clone infrastructure templates
      run: |
        rm -rf aws-infra
        git clone https://github.com/rodneyazev/aws-templates-for-basic-loadbalancer-and-auto-scaling-infrastructures.git aws-infra

    - name: Debug - Check initial state files
      run: |
        echo "=== Initial state files in persistent directory ==="
        ls -la ${{ env.PERSISTENT_STATE_DIR }}/* 2>/dev/null || echo "No files in persistent directory"
        echo "=== Initial state files in terraform directory ==="
        ls -la *.tfstate* 2>/dev/null || echo "No state files in terraform directory"
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Restore previous state
      run: |
        echo "Restoring state files from persistent storage..."
        if [ -n "$(find ../${{ env.PERSISTENT_STATE_DIR }} -name '*.tfstate*' -print -quit)" ]; then
          cp ../${{ env.PERSISTENT_STATE_DIR }}/*.tfstate* .
          echo "State files restored successfully"
          ls -la *.tfstate*
        else
          echo "No previous state files found to restore"
        fi
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Plan
      if: github.event.inputs.action == 'plan'
      run: terraform plan
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Plan Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform plan -destroy
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: terraform apply -auto-approve
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform destroy -auto-approve
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Save state files after operation
      run: |
        echo "Saving state files to persistent storage..."
        # Remove old state files from persistent directory
        rm -f ../${{ env.PERSISTENT_STATE_DIR }}/*.tfstate*
        # Copy new state files
        if [ -n "$(find . -name '*.tfstate*' -print -quit)" ]; then
          cp *.tfstate* ../${{ env.PERSISTENT_STATE_DIR }}/
          echo "State files saved successfully:"
          ls -la ../${{ env.PERSISTENT_STATE_DIR }}/*.tfstate*
        else
          echo "No state files to save after operation"
        fi
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Upload state files as artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-state
        path: ${{ env.PERSISTENT_STATE_DIR }}/
        retention-days: 30