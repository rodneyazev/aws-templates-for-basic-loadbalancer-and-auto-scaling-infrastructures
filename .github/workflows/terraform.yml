name: Terraform AWS Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Terraform action'
        required: true
        options:
          - plan
          - apply
          - destroy
        default: 'plan'

env:
  TF_WORKING_DIR: 'aws-infra/aws-basic-infra'

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Verify S3 bucket exists
      run: |
        echo "Using permanent S3 bucket: ${{ secrets.TF_STATE_BUCKET }}"
        aws s3api head-bucket --bucket "${{ secrets.TF_STATE_BUCKET }}" || {
          echo "ERROR: S3 bucket ${{ secrets.TF_STATE_BUCKET }} doesn't exist!"
          echo "Create it manually first:"
          echo "aws s3api create-bucket --bucket ${{ secrets.TF_STATE_BUCKET }} --region ${{ secrets.AWS_REGION }}"
          exit 1
        }
        echo "âœ“ S3 bucket verified"

    - name: Clone infrastructure templates
      run: |
        rm -rf aws-infra
        git clone https://github.com/rodneyazev/aws-templates-for-basic-loadbalancer-and-auto-scaling-infrastructures.git aws-infra

    - name: Configure S3 backend
      run: |
        # Remove any existing backend config
        rm -f backend.tf
        
        cat > backend.tf << EOF
        terraform {
          backend "s3" {
            bucket = "${{ secrets.TF_STATE_BUCKET }}"
            key    = "terraform.tfstate"
            region = "${{ secrets.AWS_REGION }}"
          }
        }
        EOF
        echo "Configured S3 backend with PERMANENT bucket: ${{ secrets.TF_STATE_BUCKET }}"
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Update SSH Key Configuration
      run: |
        sed -i 's|~/.aws/<your-ssh-key>.pem|~/.aws/my-ssh-key-votc.pem|g' variables.tf
        sed -i 's|<your-ssh-key-NAME>|my-ssh-key-votc|g' variables.tf
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Check current state before operation
      run: |
        echo "=== Current State ==="
        terraform state list 2>/dev/null || echo "No existing state"
        echo "=== S3 State File ==="
        aws s3 ls s3://${{ secrets.TF_STATE_BUCKET }}/terraform.tfstate || echo "No state file in S3"
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Plan
      if: github.event.inputs.action == 'plan'
      run: terraform plan
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: terraform apply -auto-approve
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform destroy -auto-approve
      working-directory: ${{ env.TF_WORKING_DIR }}

    - name: Show state after operation
      if: always()
      run: |
        echo "=== State After Operation ==="
        terraform state list 2>/dev/null || echo "No state remaining"
      working-directory: ${{ env.TF_WORKING_DIR }}