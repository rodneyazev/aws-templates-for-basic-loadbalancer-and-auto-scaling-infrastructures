name: Terraform AWS Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Terraform action'
        required: true
        options:
          - plan
          - apply
          - destroy
        default: 'plan'

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Verify S3 bucket exists
      run: |
        echo "Using permanent S3 bucket: ${{ secrets.TF_STATE_BUCKET }}"
        aws s3api head-bucket --bucket "${{ secrets.TF_STATE_BUCKET }}" || {
          echo "ERROR: S3 bucket ${{ secrets.TF_STATE_BUCKET }} doesn't exist!"
          exit 1
        }
        echo "âœ“ S3 bucket verified"

    - name: Clone infrastructure templates
      run: |
        rm -rf aws-infra
        git clone https://github.com/rodneyazev/aws-templates-for-basic-loadbalancer-and-auto-scaling-infrastructures.git aws-infra
        
        echo "=== Directory Structure ==="
        find aws-infra -type f -name "*.tf" | head -10
        echo "=== Looking for main Terraform directory ==="
        find aws-infra -name "*.tf" -exec dirname {} \; | sort -u

    - name: Find Terraform working directory
      id: find_tf_dir
      run: |
        # Look for directories with .tf files
        TF_DIRS=$(find aws-infra -name "*.tf" -exec dirname {} \; | sort -u)
        echo "Found Terraform directories:"
        echo "$TF_DIRS"
        
        # Use the first one (usually the main one)
        MAIN_TF_DIR=$(echo "$TF_DIRS" | head -1)
        echo "Using directory: $MAIN_TF_DIR"
        echo "tf_working_dir=$MAIN_TF_DIR" >> $GITHUB_OUTPUT

    - name: Configure S3 backend
      run: |
        cat > backend.tf << EOF
        terraform {
          backend "s3" {
            bucket = "${{ secrets.TF_STATE_BUCKET }}"
            key    = "terraform.tfstate"
            region = "${{ secrets.AWS_REGION }}"
          }
        }
        EOF
        echo "Configured S3 backend with bucket: ${{ secrets.TF_STATE_BUCKET }}"
      working-directory: ${{ steps.find_tf_dir.outputs.tf_working_dir }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ steps.find_tf_dir.outputs.tf_working_dir }}

    - name: Check current state before operation
      run: |
        echo "=== Current State ==="
        terraform state list 2>/dev/null || echo "No existing state"
      working-directory: ${{ steps.find_tf_dir.outputs.tf_working_dir }}

    - name: Terraform Plan
      if: github.event.inputs.action == 'plan'
      run: terraform plan
      working-directory: ${{ steps.find_tf_dir.outputs.tf_working_dir }}

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: terraform apply -auto-approve
      working-directory: ${{ steps.find_tf_dir.outputs.tf_working_dir }}

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform destroy -auto-approve
      working-directory: ${{ steps.find_tf_dir.outputs.tf_working_dir }}

    - name: Show state after operation
      if: always()
      run: |
        echo "=== State After Operation ==="
        terraform state list 2>/dev/null || echo "No state remaining"
      working-directory: ${{ steps.find_tf_dir.outputs.tf_working_dir }}